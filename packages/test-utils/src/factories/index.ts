import { faker } from "@faker-js/faker";
import type { Config, Shop, ShopifyOrder, ShopifyProduct } from "@minimall/types";

/**
 * Factory functions for generating test data
 */

export const createShop = (overrides?: Partial<Shop>): Shop => ({
  id: faker.string.uuid(),
  domain: faker.internet.domainName(),
  name: faker.company.name(),
  email: faker.internet.email(),
  accessToken: faker.string.alphanumeric(32),
  scope: "read_products,write_products",
  status: "active",
  installedAt: faker.date.past(),
  uninstalledAt: null,
  metadata: {},
  createdAt: faker.date.past(),
  updatedAt: faker.date.recent(),
  ...overrides,
});

export const createConfig = (overrides?: Partial<Config>): Config => ({
  id: faker.string.uuid(),
  shopId: faker.string.uuid(),
  name: faker.commerce.productName(),
  slug: faker.lorem.slug(),
  settings: {
    theme: {
      primaryColor: faker.internet.color(),
      secondaryColor: faker.internet.color(),
      fontFamily: "Inter",
      borderRadius: "8px",
      spacing: "16px",
    },
    blocks: [],
  },
  status: "draft",
  publishedAt: null,
  version: 1,
  createdAt: faker.date.past(),
  updatedAt: faker.date.recent(),
  ...overrides,
});

export const createProduct = (overrides?: Partial<ShopifyProduct>): ShopifyProduct => ({
  id: faker.number.int({ min: 1000, max: 9999 }),
  title: faker.commerce.productName(),
  body_html: faker.commerce.productDescription(),
  vendor: faker.company.name(),
  product_type: faker.commerce.department(),
  created_at: faker.date.past().toISOString(),
  handle: faker.lorem.slug(),
  updated_at: faker.date.recent().toISOString(),
  published_at: faker.date.past().toISOString(),
  template_suffix: null,
  status: "active",
  published_scope: "web",
  tags: faker.lorem.words(3),
  admin_graphql_api_id: `gid://shopify/Product/${faker.number.int()}`,
  variants: [],
  options: [],
  images: [],
  ...overrides,
});

export const createOrder = (overrides?: Partial<ShopifyOrder>): ShopifyOrder => ({
  id: faker.number.int({ min: 1000, max: 9999 }),
  email: faker.internet.email(),
  closed_at: null,
  created_at: faker.date.recent().toISOString(),
  updated_at: faker.date.recent().toISOString(),
  number: faker.number.int({ min: 1000, max: 9999 }),
  note: null,
  token: faker.string.alphanumeric(32),
  gateway: "shopify_payments",
  test: false,
  total_price: faker.commerce.price(),
  subtotal_price: faker.commerce.price(),
  total_weight: faker.number.int({ min: 100, max: 5000 }),
  total_tax: faker.commerce.price({ min: 0, max: 50 }),
  taxes_included: true,
  currency: "USD",
  financial_status: "paid",
  confirmed: true,
  total_discounts: "0.00",
  total_line_items_price: faker.commerce.price(),
  cart_token: faker.string.alphanumeric(32),
  buyer_accepts_marketing: faker.datatype.boolean(),
  name: `#${faker.number.int({ min: 1000, max: 9999 })}`,
  referring_site: faker.internet.url(),
  landing_site: faker.internet.url(),
  cancelled_at: null,
  cancel_reason: null,
  total_price_usd: faker.commerce.price(),
  checkout_token: faker.string.alphanumeric(32),
  reference: faker.string.alphanumeric(16),
  user_id: null,
  location_id: null,
  source_identifier: faker.string.alphanumeric(16),
  source_url: null,
  processed_at: faker.date.recent().toISOString(),
  device_id: null,
  phone: faker.phone.number(),
  customer_locale: "en",
  app_id: faker.number.int({ min: 1000, max: 9999 }),
  browser_ip: faker.internet.ip(),
  landing_site_ref: null,
  order_number: faker.number.int({ min: 1000, max: 9999 }),
  discount_applications: [],
  discount_codes: [],
  note_attributes: [],
  payment_gateway_names: ["shopify_payments"],
  processing_method: "direct",
  checkout_id: faker.number.int({ min: 1000, max: 9999 }),
  source_name: "web",
  fulfillment_status: null,
  tax_lines: [],
  tags: "",
  contact_email: faker.internet.email(),
  order_status_url: faker.internet.url(),
  presentment_currency: "USD",
  total_line_items_price_set: {},
  total_discounts_set: {},
  total_shipping_price_set: {},
  subtotal_price_set: {},
  total_price_set: {},
  total_tax_set: {},
  line_items: [],
  fulfillments: [],
  refunds: [],
  total_tip_received: "0.00",
  original_total_duties_set: null,
  current_total_duties_set: null,
  admin_graphql_api_id: `gid://shopify/Order/${faker.number.int()}`,
  shipping_lines: [],
  billing_address: createAddress(),
  shipping_address: createAddress(),
  customer: createCustomer(),
  ...overrides,
});

export const createAddress = () => ({
  first_name: faker.person.firstName(),
  last_name: faker.person.lastName(),
  address1: faker.location.streetAddress(),
  address2: faker.location.secondaryAddress(),
  phone: faker.phone.number(),
  city: faker.location.city(),
  zip: faker.location.zipCode(),
  province: faker.location.state(),
  country: faker.location.country(),
  company: faker.company.name(),
  latitude: faker.location.latitude(),
  longitude: faker.location.longitude(),
  name: faker.person.fullName(),
  country_code: faker.location.countryCode(),
  province_code: faker.location.countryCode(),
});

export const createCustomer = () => ({
  id: faker.number.int({ min: 1000, max: 9999 }),
  email: faker.internet.email(),
  created_at: faker.date.past().toISOString(),
  updated_at: faker.date.recent().toISOString(),
  first_name: faker.person.firstName(),
  last_name: faker.person.lastName(),
  orders_count: faker.number.int({ min: 0, max: 50 }),
  state: "enabled",
  total_spent: faker.commerce.price({ min: 0, max: 10000 }),
  last_order_id: faker.number.int({ min: 1000, max: 9999 }),
  note: null,
  verified_email: true,
  multipass_identifier: null,
  tax_exempt: false,
  phone: faker.phone.number(),
  tags: "",
  last_order_name: `#${faker.number.int({ min: 1000, max: 9999 })}`,
  currency: "USD",
  accepts_marketing: faker.datatype.boolean(),
  accepts_marketing_updated_at: faker.date.recent().toISOString(),
  marketing_opt_in_level: null,
  tax_exemptions: [],
  admin_graphql_api_id: `gid://shopify/Customer/${faker.number.int()}`,
  default_address: createAddress(),
});
