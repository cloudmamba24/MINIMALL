name: Test Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          # Test environment variables
          R2_ENDPOINT: https://test.r2.cloudflarestorage.com
          R2_ACCESS_KEY: test-access-key
          R2_SECRET: test-secret
          R2_BUCKET_NAME: test-bucket
          NEXT_PUBLIC_BASE_URL: http://localhost:3000
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          files: |
            ./coverage/lcov.info
            ./packages/*/coverage/lcov.info
            ./apps/*/coverage/lcov.info

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            packages/*/coverage/
            apps/*/coverage/
          retention-days: 30

      - name: Comment coverage summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Read coverage summary
              const coverageFile = path.join('./coverage', 'coverage-summary.json');
              if (!fs.existsSync(coverageFile)) {
                console.log('No coverage summary found');
                return;
              }
              
              const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
              const { total } = coverage;
              
              const getCoverageEmoji = (pct) => {
                if (pct >= 80) return '🟢';
                if (pct >= 60) return '🟡';
                return '🔴';
              };
              
              const comment = `## 📊 Test Coverage Report
              
              | Metric | Coverage | Status |
              |--------|----------|--------|
              | **Statements** | ${total.statements.pct}% | ${getCoverageEmoji(total.statements.pct)} |
              | **Branches** | ${total.branches.pct}% | ${getCoverageEmoji(total.branches.pct)} |
              | **Functions** | ${total.functions.pct}% | ${getCoverageEmoji(total.functions.pct)} |
              | **Lines** | ${total.lines.pct}% | ${getCoverageEmoji(total.lines.pct)} |
              
              **Coverage Threshold:** 70% minimum
              
              ${total.lines.pct >= 70 ? '✅ Coverage meets threshold' : '❌ Coverage below threshold'}
              
              📈 [Full coverage report available in Actions artifacts]
              `;
              
              // Find existing coverage comment
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const existingComment = comments.find(comment => 
                comment.body.includes('📊 Test Coverage Report')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post coverage results:', error.message);
            }

  package-coverage:
    name: Package Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        package: [core, ui, db]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run package-specific tests
        run: |
          cd packages/${{ matrix.package }}
          npm run test -- --coverage
        env:
          # Test environment variables
          R2_ENDPOINT: https://test.r2.cloudflarestorage.com
          R2_ACCESS_KEY: test-access-key
          R2_SECRET: test-secret
          R2_BUCKET_NAME: test-bucket
          NODE_ENV: test

      - name: Upload package coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: packages/${{ matrix.package }}/coverage/
          retention-days: 7

  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: [coverage]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage-reports/

      - name: Check coverage thresholds
        run: |
          # Parse coverage and check thresholds
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            const coverageFile = path.join('./coverage-reports/coverage', 'coverage-summary.json');
            if (!fs.existsSync(coverageFile)) {
              console.log('❌ No coverage summary found');
              process.exit(1);
            }
            
            const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
            const { total } = coverage;
            const threshold = 70;
            
            console.log('📊 Coverage Summary:');
            console.log(\`  Statements: \${total.statements.pct}%\`);
            console.log(\`  Branches: \${total.branches.pct}%\`);
            console.log(\`  Functions: \${total.functions.pct}%\`);
            console.log(\`  Lines: \${total.lines.pct}%\`);
            console.log('');
            
            const failed = [
              ['Statements', total.statements.pct],
              ['Branches', total.branches.pct],
              ['Functions', total.functions.pct],
              ['Lines', total.lines.pct]
            ].filter(([name, pct]) => pct < threshold);
            
            if (failed.length > 0) {
              console.log(\`❌ Coverage below threshold (\${threshold}%):\`);
              failed.forEach(([name, pct]) => console.log(\`  - \${name}: \${pct}%\`));
              process.exit(1);
            }
            
            console.log(\`✅ All coverage metrics meet threshold (\${threshold}%)\`);
          "

      - name: Coverage gate passed
        run: echo "✅ Coverage gate passed - all thresholds met"