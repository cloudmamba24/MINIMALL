name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run E2E tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '22'

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/4, 2/4, 3/4, 4/4]
      fail-fast: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Build applications
        run: npm run build
        env:
          # Test environment variables
          R2_ENDPOINT: https://test.r2.cloudflarestorage.com
          R2_ACCESS_KEY: test-access-key
          R2_SECRET: test-secret
          R2_BUCKET_NAME: test-bucket
          NEXT_PUBLIC_BASE_URL: http://localhost:3000
          NODE_ENV: test

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
        env:
          # Test environment variables
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          R2_ENDPOINT: https://test.r2.cloudflarestorage.com
          R2_ACCESS_KEY: test-access-key
          R2_SECRET: test-secret
          R2_BUCKET_NAME: test-bucket
          NEXT_PUBLIC_BASE_URL: http://localhost:3000
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ strategy.job-index }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  e2e-report:
    name: Generate E2E Report
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: always()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/
          pattern: e2e-results-*

      - name: Merge test results
        run: |
          mkdir -p merged-results
          find all-test-results -name "*.json" -exec cp {} merged-results/ \;

      - name: Generate HTML report
        run: npx playwright merge-reports merged-results/

      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-merged-report
          path: playwright-report/
          retention-days: 14

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build applications
        run: npm run build
        env:
          R2_ENDPOINT: https://test.r2.cloudflarestorage.com
          R2_ACCESS_KEY: test-access-key
          R2_SECRET: test-secret
          R2_BUCKET_NAME: test-bucket
          NEXT_PUBLIC_BASE_URL: http://localhost:3000
          NODE_ENV: production

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Start applications
        run: |
          npm run dev:public &
          npm run dev:admin &
          sleep 30
        env:
          NODE_ENV: production

      - name: Run Lighthouse audit - Public
        run: |
          lighthouse http://localhost:3000 \
            --output=html,json \
            --output-path=./lighthouse-public \
            --chrome-flags="--headless --no-sandbox" \
            --quiet

      - name: Run Lighthouse audit - Admin
        run: |
          lighthouse http://localhost:3001 \
            --output=html,json \
            --output-path=./lighthouse-admin \
            --chrome-flags="--headless --no-sandbox" \
            --quiet

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            lighthouse-public.*
            lighthouse-admin.*
          retention-days: 7

      - name: Comment performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const publicReport = JSON.parse(fs.readFileSync('./lighthouse-public.json', 'utf8'));
              const adminReport = JSON.parse(fs.readFileSync('./lighthouse-admin.json', 'utf8'));
              
              const getScoreEmoji = (score) => {
                if (score >= 0.9) return 'ðŸŸ¢';
                if (score >= 0.7) return 'ðŸŸ¡';
                return 'ðŸ”´';
              };
              
              const formatScore = (score) => Math.round(score * 100);
              
              const comment = `## ðŸš€ Performance Audit Results
              
              ### Public App
              - **Performance:** ${getScoreEmoji(publicReport.categories.performance.score)} ${formatScore(publicReport.categories.performance.score)}
              - **Accessibility:** ${getScoreEmoji(publicReport.categories.accessibility.score)} ${formatScore(publicReport.categories.accessibility.score)}
              - **Best Practices:** ${getScoreEmoji(publicReport.categories['best-practices'].score)} ${formatScore(publicReport.categories['best-practices'].score)}
              - **SEO:** ${getScoreEmoji(publicReport.categories.seo.score)} ${formatScore(publicReport.categories.seo.score)}
              
              ### Admin App
              - **Performance:** ${getScoreEmoji(adminReport.categories.performance.score)} ${formatScore(adminReport.categories.performance.score)}
              - **Accessibility:** ${getScoreEmoji(adminReport.categories.accessibility.score)} ${formatScore(adminReport.categories.accessibility.score)}
              - **Best Practices:** ${getScoreEmoji(adminReport.categories['best-practices'].score)} ${formatScore(adminReport.categories['best-practices'].score)}
              - **SEO:** ${getScoreEmoji(adminReport.categories.seo.score)} ${formatScore(adminReport.categories.seo.score)}
              
              ðŸ“Š [Full Lighthouse Reports Available in Actions Artifacts]
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post performance results:', error.message);
            }